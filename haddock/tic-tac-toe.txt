-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/tic-tac-toe#readme</a>
@package tic-tac-toe
@version 0.1.0.0

module GameState
data Player
X :: Player
O :: Player
type Turn = Player
newtype Board
Board :: String -> Board
data GameState board turn
GameState :: board -> turn -> GameState board turn
dim :: Int
size :: Int
red :: Paint
blue :: Paint

-- | The state of the game upon initialization.
initBoard :: GameState Board Turn

-- | Color <a>X</a> red and <a>O</a> blue in the terminal.
colorize :: Board -> String

-- | Display the board as a user-friendly string.
render :: Board -> String

-- | Alternate turns between <a>X</a> and <a>O</a>
switchTurn :: Turn -> Turn

-- | <a>move</a> marks the desired position with the symbol corresponding
--   |to the current player.
move :: GameState Board Turn -> Int -> GameState Board Turn

-- | <a>possibleMoves</a> returns a list of the remaining valid moves.
possibleMoves :: GameState Board Turn -> [Int]

-- | Determine whether the game board is empty.
isStart :: GameState Board Turn -> Bool

-- | Determine whether <a>Player</a> has achieved the victory condition.
isWinFor :: GameState Board Turn -> Player -> Bool

-- | Determine whether the game has ended.
isEnd :: GameState Board Turn -> Bool
instance (GHC.Classes.Eq board, GHC.Classes.Eq turn) => GHC.Classes.Eq (GameState.GameState board turn)
instance GHC.Classes.Eq GameState.Board
instance GHC.Enum.Enum GameState.Player
instance GHC.Classes.Eq GameState.Player
instance GHC.Show.Show GameState.Player
instance (GHC.Show.Show board, GHC.Show.Show turn) => GHC.Show.Show (GameState.GameState board turn)
instance GHC.Show.Show GameState.Board
