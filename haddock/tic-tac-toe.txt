-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/zarak/tic-tac-toe#readme</a>
@package tic-tac-toe
@version 0.1.0.0


-- | Module containing data structures to represent the game state, actions
--   to modify state, and rendering functions to display state.
module GameState
data Player

-- | Player X
X :: Player

-- | Player O
O :: Player

-- | A type alias to clarify the semantics of the <a>GameState</a> product
--   type.
type Turn = Player
newtype Board

-- | <a>Board</a> takes a string with the following conventions: The
--   character X represents Player <a>X</a>. The character O represents
--   Player <a>O</a>. A space represents an empty cell.
Board :: String -> Board
data GameState board turn

-- | <a>GameState</a> accepts polymorphic types so that the board and/or
--   turn can also be represented as alternative data structures (such as a
--   string, or a list of <a>X</a> for board)
GameState :: board -> turn -> GameState board turn

-- | The length of the side of the board - default value is 3. Denoted as
--   &lt;math&gt; within this documentation.
dim :: Int

-- | The number of cells in the board: &lt;math&gt;.
size :: Int

-- | The color of <a>X</a>.
red :: Paint

-- | The color of <a>O</a>.
blue :: Paint

-- | The state of the game upon initialization.
initBoard :: GameState Board Turn

-- | Color <a>X</a> red and <a>O</a> blue in the terminal.
colorize :: Board -> String

-- | Display the board as a user-friendly string.
--   
--   <pre>
--   &gt;&gt;&gt; render (Board "XOX OO X ")
--    0 | 1 | 2
--   -----------
--    3 | 4 | 5
--   -----------
--    6 | 7 | 8
--   </pre>
render :: Board -> String

-- | Alternate turns between <a>X</a> and <a>O</a>
--   
--   <pre>
--   &gt;&gt;&gt; switchTurn X
--   O
--   </pre>
switchTurn :: Turn -> Turn

-- | <a>move</a> marks the desired position with the symbol corresponding
--   to the current player.
move :: GameState Board Turn -> Int -> GameState Board Turn

-- | <a>possibleMoves</a> returns a list of the remaining valid moves.
--   
--   <pre>
--   &gt;&gt;&gt; possibleMoves (GameState (Board "XXXOOOXX ") O)
--   [8]
--   </pre>
possibleMoves :: GameState Board Turn -> [Int]

-- | Determine whether the game board is empty.
isStart :: GameState Board Turn -> Bool

-- | Determine whether <a>Player</a> has achieved the victory condition.
--   
--   The main diagonal is the sequence &lt;math&gt;. The off diagonal is
--   the sequence &lt;math&gt;.
isWinFor :: GameState Board Turn -> Player -> Bool

-- | Determine whether the game has ended.
isEnd :: GameState Board Turn -> Bool
instance (GHC.Classes.Eq board, GHC.Classes.Eq turn) => GHC.Classes.Eq (GameState.GameState board turn)
instance GHC.Classes.Eq GameState.Board
instance GHC.Enum.Enum GameState.Player
instance GHC.Classes.Eq GameState.Player
instance GHC.Show.Show GameState.Player
instance (GHC.Show.Show board, GHC.Show.Show turn) => GHC.Show.Show (GameState.GameState board turn)
instance GHC.Show.Show GameState.Board
